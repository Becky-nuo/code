#多态和方法


#print(object.get_price())     #像这样与对象属性相关联的函数称为方法。

print('abc'.count('a'))
print([1, 2, 'a'].count('a'))


'''从序列中随机选择一个元素,下面使用这个函数给变量提供一个值。'''
from random import choice
x = choice(['Hello, world!', [1, 2, 'e', 'e', 4]])#只关心x包含多少个'e'，而不管x是字符串还是列表你都能找到答案。


x.count('e') #只要x有一个名为count的方法，它将单个字符作为参数并返回一个整数就行。

print(1 + 2)
print('Fish' + 'license')  # + 也可用于字符串


def add(x, y):  #创建两个对象相加的add 函数
    return x + y


'''可使用众多不同类型的参数来调用这个函数。'''


print(add(1, 2))
print(add('Fish', 'license'))  #重点是参数可以是你任何支持加法的对象

def length_message(x):   #参数的唯一要求是有长度，可对其执行函数len
    print("The length of", repr(x), "is", len(x))


print(length_message('Fnord'))  #epr是多态的集大成者之一，可用于任何对象
print(length_message([1,2,3]))





'''

    函数：字符串、列表和字典的方法。
    如果有一个变量x，你无需知道它是字符串还是列表就能调用方法count：
只要你向这个方法提供一个字符作为参数，它就能正常运行。

    如果有人创建了包含这个方法的对象，你也可以像使用字符串和列表一样使用这种对象。
多态形式多样每当无需知道对象是什么样的就能对其执行操作时，都是多态在起作用。
这不仅仅适用于方法，我们还通过内置运算符和函数大量使用了多态。


    加法运算符（ +）既可用于数（这里是整数），也可用于字符串（以及其他类型的序列）。

    很多函数和运算符都是多态的
    使用多态的函数和运算符时，多态都将发挥作用。
    要破坏多态，唯一的办法是使用诸如type、 issubclass等函数显式地执行类型检查，但你应尽可能避免以这种方式破坏多态。
    '''
