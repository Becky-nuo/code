#类的定义

class Student:   #类名一般首字母大写

    def __init__(self,name,score):  #self必须位于第一个参数，给实例属性赋值
        self.name = name   #实例属性
        self.score = score


    def say_score(self):   #self必须位于第一个参数
        print("{0}的分数是：{1}".format(self.name,self.score))


s1 = Student("小明",19)  #通过类名（）调用构造函数
s1.say_score()

s1.age = 20
s1.salary = 3000

print(s1.salary)

s2 = Student("小张",100)
s2.say_score()

Student.say_score(s2)  #解释器翻译

print(dir(s2))   #可以获得对象的所有属性、方法
print(s2.__dict__)  #对象的属性字典

class Man:
    pass    #空语句

print(isinstance(s2,Man))  #判断“对象”是不是“指定类型”

 
'''
    1、类定义数据的属性（数据）和方法（行为），也就是说，“类将行为和状态打包在一起”。
    2、类创建对象时，每个对象会共享这个类的行为（类中定义的方法），/
    但会有自己的属性值（不共享状态）,即“方法代码是共享，属性数据不共享”。
    3、类也称为“类对象”，类实例称为“实例对象”
    4、语法格式：
            class 类名:
                类体
    5、类名必须符合“标识符”的规则（首字母大写、多个单词使用“驼峰原则”）
    6、类体中我们可以定义属性和方法
    7、属性用来描述数据，方法（即函数）用来描述数据相关的操作


    __init__()的要点
    1、名称固定，必须为：__init__()
    2、第一个参数固定，必须为：self。self指的是刚刚创建好的实例对象
    3、构造函数通常用来初始化实例对象的实例属性
    4、通过"类名(参数列表)"来调用构造函数，调用后，将创建好的对象返回给相应的变量
    5、__init__()方法：初始化创建好的对象，初始化指的是：给实例属性赋值
    6、__new__()方法：用于创建对象，但我们一般无需重定义该方法


    实例属性的要点
    1、实例属性一般在__init__()方法中通过：self实例属性名 = 初始值 定义
    2、在本类的其他实例方法中，也是通过self进行访问：self实例属性名

    
    实例方法的要点
    1、定义格式：
        def 方法名(self[形参列表]):
            函数体
    2、方法的调用格式：
            对象.方法名([实参列表])
    3、定义实例方法时，第一个参数必须为self。和前面一样，self指当前的实例对象
    4、调用实例方法时，不需要也不能给self传参,self有解释器自动传参.
    5、dir(obj)可以获得对象的所有属性、方法
    6、obj._dict_ 对象的属性字典
    7、pass 空语句
    8、isinstance（对象、类型），判断“对象”是不是“指定类型”
    
'''
